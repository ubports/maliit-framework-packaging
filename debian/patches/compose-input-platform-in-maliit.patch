--- a/input-context/minputcontext.cpp
+++ b/input-context/minputcontext.cpp
@@ -31,6 +31,16 @@
 #include <QSharedDataPointer>
 #include <QQuickItem>
 
+// includes needed to load input context plugin
+#include <qpa/qplatforminputcontextfactory_p.h>
+#include <qpa/qplatforminputcontextplugin_p.h>
+#include <qpa/qplatforminputcontext.h>
+#include "private/qfactoryloader_p.h"
+
+Q_GLOBAL_STATIC_WITH_ARGS(QFactoryLoader, loader,
+  (QPlatformInputContextFactoryInterface_iid, QLatin1String("/platforminputcontexts"), 
+   Qt::CaseInsensitive))
+
 namespace
 {
     const int SoftwareInputPanelHideTimer = 100;
@@ -52,7 +62,9 @@
       inputPanelState(InputPanelHidden),
       preeditCursorPos(-1),
       redirectKeys(false),
-      currentFocusAcceptsInput(false)
+      currentFocusAcceptsInput(false),
+      composeInputContext(qLoadPlugin1<QPlatformInputContext, QPlatformInputContextPlugin>
+                                      (loader(), "compose", QStringList()))
 {
     QByteArray debugEnvVar = qgetenv("MALIIT_DEBUG");
     if (!debugEnvVar.isEmpty() && debugEnvVar != "0") {
@@ -81,6 +93,7 @@
 MInputContext::~MInputContext()
 {
     delete imServer;
+    if (composeInputContext) delete composeInputContext;
 }
 
 void MInputContext::connectInputMethodServer()
@@ -152,6 +165,7 @@
 
 void MInputContext::reset()
 {
+    if (composeInputContext) composeInputContext->reset();
     if (debug) qDebug() << InputContextName << "in" << __PRETTY_FUNCTION__;
 
     const bool hadPreedit = !preedit.isEmpty();
@@ -227,6 +241,7 @@
 
 void MInputContext::update(Qt::InputMethodQueries queries)
 {
+    if (composeInputContext) composeInputContext->update(queries);
     if (debug) qDebug() << InputContextName << "in" << __PRETTY_FUNCTION__;
 
     Q_UNUSED(queries) // fetching everything
@@ -263,6 +278,7 @@
 
 void MInputContext::setFocusObject(QObject *focused)
 {
+    if (composeInputContext) composeInputContext->setFocusObject(focused);
     if (debug) qDebug() << InputContextName << "in" << __PRETTY_FUNCTION__ << focused;
 
     updateInputMethodExtensions();
@@ -314,6 +330,11 @@
 bool MInputContext::filterEvent(const QEvent *event)
 {
     bool eaten = false;
+    bool eatenByCompose = false;
+
+    if (composeInputContext) { 
+        eatenByCompose = composeInputContext->filterEvent(event);
+    }
 
     switch (event->type()) {
 
@@ -337,7 +358,7 @@
         break;
     }
 
-    return eaten;
+    return eaten || eatenByCompose;
 }
 
 QRectF MInputContext::keyboardRect() const
--- a/input-context/minputcontext.h
+++ b/input-context/minputcontext.h
@@ -146,6 +146,7 @@
     bool redirectKeys; // redirect all hw key events to the input method or not
     QLocale inputLocale;
     bool currentFocusAcceptsInput;
+    QPlatformInputContext *composeInputContext;
 };
 
 #endif
--- a/input-context/input-context.pro
+++ b/input-context/input-context.pro
@@ -2,7 +2,7 @@
 
 TOP_DIR = ..
 
-QT += dbus gui-private quick
+QT += dbus quick gui core core-private gui-private
 TEMPLATE = lib
 CONFIG += plugin
 TARGET = maliitphabletplatforminputcontextplugin
